{"ast":null,"code":"var _jsxFileName = \"F:\\\\React Udemy\\\\Movie_Extractor\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovie] = useState([]);\n  const [firebaseMovie, setfirebaseMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(null); //Using promises\n  // const fetchMovieHandler = () => {\n  //   fetch(\"https://swapi.dev/api/films/\")\n  //     .then((response) => {\n  //       return response.json(); //This line trandform the json into javascript object\n  //     })\n  //     .then((data) => {\n  //       const transformedData = data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date,\n  //         };\n  //       });\n  //       setMovie(transformedData);\n  //     });\n  // };\n  //Using asynchronous\n\n  const fetchMovieHandler = useCallback(async () => {\n    setIsError(null);\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n      const response2 = await fetch(\"https://movie-adder-http-default-rtdb.firebaseio.com/movies.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went Wrong!!\");\n      }\n\n      const data = await response.json(); //This line trandform the json into javascript object\n\n      const data2 = await response2.json(); //This line trandform the json into javascript object\n\n      const transformedData = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovie(transformedData);\n      const loadedMovies = [];\n\n      for (const key in data2) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        });\n      }\n\n      setfirebaseMovie(loadedMovies);\n      console.log(firebaseMovie);\n    } catch (error) {\n      setIsError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMovieHandler();\n  }, [fetchMovieHandler]);\n  const fetchFireBaseMovieHandler = useCallback(async () => {\n    setIsError(null);\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(\"https://movie-adder-http-default-rtdb.firebaseio.com/movies.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went Wrong!!\");\n      }\n\n      const data = await response.json(); //This line trandform the json into javascript object\n\n      const transformedData = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovie(transformedData);\n      const loadedMovies = [];\n\n      for (const key in data2) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        });\n      }\n\n      setfirebaseMovie(loadedMovies);\n      console.log(firebaseMovie);\n    } catch (error) {\n      setIsError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMovieHandler();\n  }, [fetchMovieHandler]);\n\n  const addMovieHandler = async movie => {\n    const response = await fetch(\"https://movie-adder-http-default-rtdb.firebaseio.com/movies.json\", {\n      method: \"POST\",\n      body: JSON.stringify(movie),\n      headers: {\n        \"Content-Type\": \"al=pplication/json\"\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, !isLoading && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: firebaseMovie,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 24\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 23\n    }\n  }, \"Loading...\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, !isLoading && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 24\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 23\n    }\n  }, \"Loading...\"), !isLoading && isError && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 35\n    }\n  }, isError)));\n}\n\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","MoviesList","AddMovie","App","movies","setMovie","firebaseMovie","setfirebaseMovie","isLoading","setIsLoading","isError","setIsError","fetchMovieHandler","response","fetch","response2","ok","Error","data","json","data2","transformedData","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","loadedMovies","key","push","console","log","error","message","fetchFireBaseMovieHandler","addMovieHandler","movie","method","body","JSON","stringify","headers"],"sources":["F:/React Udemy/Movie_Extractor/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovie] = useState([]);\n  const [firebaseMovie, setfirebaseMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(null);\n\n  //Using promises\n  // const fetchMovieHandler = () => {\n  //   fetch(\"https://swapi.dev/api/films/\")\n  //     .then((response) => {\n  //       return response.json(); //This line trandform the json into javascript object\n  //     })\n  //     .then((data) => {\n  //       const transformedData = data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date,\n  //         };\n  //       });\n  //       setMovie(transformedData);\n  //     });\n  // };\n\n  //Using asynchronous\n\n  const fetchMovieHandler = useCallback(async () => {\n    setIsError(null);\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n      const response2 = await fetch(\n        \"https://movie-adder-http-default-rtdb.firebaseio.com/movies.json\"\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Something went Wrong!!\");\n      }\n      const data = await response.json(); //This line trandform the json into javascript object\n      const data2 = await response2.json(); //This line trandform the json into javascript object\n      const transformedData = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date,\n        };\n      });\n      setMovie(transformedData);\n      const loadedMovies = [];\n      for (const key in data2) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate,\n        });\n      }\n      setfirebaseMovie(loadedMovies);\n      console.log(firebaseMovie);\n    } catch (error) {\n      setIsError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMovieHandler();\n  }, [fetchMovieHandler]);\n\n  const fetchFireBaseMovieHandler=useCallback( async() =>{\n    setIsError(null);\n    setIsLoading(true);\n    try {\n      \n      \n     \n      const response=await fetch(\"https://movie-adder-http-default-rtdb.firebaseio.com/movies.json\")\n     \n      if(!response.ok){\n        throw new Error(\"Something went Wrong!!\");\n      }\n      const data = await response.json(); //This line trandform the json into javascript object\n      \n      const transformedData = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date,\n        };\n      });\n      setMovie(transformedData);\n      const loadedMovies=[];\n      for(const key in data2){\n        loadedMovies.push({\n          id:key,\n          title:data[key].title,\n          openingText:data[key].openingText,\n          releaseDate:data[key].releaseDate\n        })\n\n\n      }\n      setfirebaseMovie(loadedMovies);\n      console.log(firebaseMovie);\n\n      \n\n      \n      \n    } catch (error) {\n      setIsError(error.message);\n    }\n    setIsLoading(false);\n  },[]);\n  useEffect(()=>{\n    fetchMovieHandler();\n    \n  },[fetchMovieHandler]);\n\n  const addMovieHandler = async (movie) => {\n    const response = await fetch(\n      \"https://movie-adder-http-default-rtdb.firebaseio.com/movies.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(movie),\n        headers: {\n          \"Content-Type\": \"al=pplication/json\",\n        },\n      }\n    );\n    const data = await response.json();\n    console.log(data);\n  };\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler}></AddMovie>\n      </section>\n      <section>\n        {!isLoading && <MoviesList movies={firebaseMovie} />}\n        {isLoading && <p>Loading...</p>}\n      </section>\n      <section>\n        <button onClick={fetchMovieHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {!isLoading && <MoviesList movies={movies} />}\n        {isLoading && <p>Loading...</p>}\n        {!isLoading && isError && <p>{isError}</p>}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}