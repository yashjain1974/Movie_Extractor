{"ast":null,"code":"var _jsxFileName = \"F:\\\\React Udemy\\\\Movie_Extractor\\\\src\\\\App.js\";\nimport React, { useState } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); //Using promises\n  // const fetchMovieHandler = () => {\n  //   fetch(\"https://swapi.dev/api/films/\")\n  //     .then((response) => {\n  //       return response.json(); //This line trandform the json into javascript object\n  //     })\n  //     .then((data) => {\n  //       const transformedData = data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date,\n  //         };\n  //       });\n  //       setMovie(transformedData);\n  //     });\n  // };\n  //Using asynchronous\n\n  async function fetchMovieHandler() {\n    setIsLoading(true);\n    const response = await fetch(\"https://swapi.dev/api/films/\");\n    const data = await response.json(); //This line trandform the json into javascript object\n\n    const transformedData = data.results.map(movieData => {\n      return {\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText: movieData.opening_crawl,\n        releaseDate: movieData.release_date\n      };\n    });\n    setMovie(transformedData);\n    setIsLoading(false);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, !isLoading && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 23\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"names":["React","useState","MoviesList","App","movies","setMovie","isLoading","setIsLoading","fetchMovieHandler","response","fetch","data","json","transformedData","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date"],"sources":["F:/React Udemy/Movie_Extractor/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovie] = useState([]);\n  const [isLoading,setIsLoading]=useState(false);\n\n  //Using promises\n  // const fetchMovieHandler = () => {\n  //   fetch(\"https://swapi.dev/api/films/\")\n  //     .then((response) => {\n  //       return response.json(); //This line trandform the json into javascript object\n  //     })\n  //     .then((data) => {\n  //       const transformedData = data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.release_date,\n  //         };\n  //       });\n  //       setMovie(transformedData);\n  //     });\n  // };\n\n  //Using asynchronous\n  async function fetchMovieHandler() {\n    setIsLoading(true);\n    const response = await fetch(\"https://swapi.dev/api/films/\");\n\n    const data = await response.json(); //This line trandform the json into javascript object\n\n    const transformedData = data.results.map((movieData) => {\n      return {\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText: movieData.opening_crawl,\n        releaseDate: movieData.release_date,\n      };\n    });\n    setMovie(transformedData);\n    setIsLoading(false);\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMovieHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {!isLoading &&<MoviesList movies={movies} />}\n        {}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;EACb,MAAM,CAACC,MAAD,EAASC,QAAT,IAAqBJ,QAAQ,CAAC,EAAD,CAAnC;EACA,MAAM,CAACK,SAAD,EAAWC,YAAX,IAAyBN,QAAQ,CAAC,KAAD,CAAvC,CAFa,CAIb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;EACA,eAAeO,iBAAf,GAAmC;IACjCD,YAAY,CAAC,IAAD,CAAZ;IACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAAD,CAA5B;IAEA,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CAJiC,CAIG;;IAEpC,MAAMC,eAAe,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAkBC,SAAD,IAAe;MACtD,OAAO;QACLC,EAAE,EAAED,SAAS,CAACE,UADT;QAELC,KAAK,EAAEH,SAAS,CAACG,KAFZ;QAGLC,WAAW,EAAEJ,SAAS,CAACK,aAHlB;QAILC,WAAW,EAAEN,SAAS,CAACO;MAJlB,CAAP;IAMD,CAPuB,CAAxB;IAQAlB,QAAQ,CAACQ,eAAD,CAAR;IACAN,YAAY,CAAC,KAAD,CAAZ;EACD;;EAED,oBACE,oBAAC,KAAD,CAAO,QAAP;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAQ,OAAO,EAAEC,iBAAjB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,kBADF,CADF,eAIE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACG,CAACF,SAAD,iBAAa,oBAAC,UAAD;IAAY,MAAM,EAAEF,MAApB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADhB,CAJF,CADF;AAWD;;AAED,eAAeD,GAAf"},"metadata":{},"sourceType":"module"}